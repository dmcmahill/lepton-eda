(use-modules (srfi srfi-64))

(load-from-path "env.scm")

(define-syntax test-name
  (lambda (x)
    (syntax-case x ()
      ((_ <schematic> <backend>)
       #'(string-append <schematic> "-" <backend>)))))


(define (test-netlist schematic backend)
  (let* ((schematic-filename (build-test-file-name schematic))
         (base (string-drop-right schematic 4))
         (golden-out (build-test-file-name (string-append base "-" backend ".out")))
         (test-out (tmpnam)))
    (test-assert (file-exists? schematic-filename))
    (test-assert (file-exists? golden-out))

    (test-eq EXIT_SUCCESS
      (status:exit-val (system* *netlister*
                                "-L" *backend-directory*
                                "-c" *component-library-command*
                                "-g" backend
                                "-o" test-out
                                schematic-filename)))
    (test-eq EXIT_SUCCESS
      (status:exit-val (system* "diff" test-out golden-out)))

    (when (file-exists? test-out) (delete-file test-out))))


(define-syntax test-schematic
  (lambda (stx)
    (syntax-case stx ()
      ((_ <schematic> <backend> <args> ...)
       #'(begin
           (test-begin (test-name <schematic> <backend>))
           (test-netlist <schematic> <backend> <args> ...)
           (test-end (test-name <schematic> <backend>)))))))

(test-begin "netlister")

(test-assert (file-exists? *netlister*))
(test-eq EXIT_SUCCESS
  (status:exit-val (system* *netlister* "--help")))

(test-end "netlister")


(test-schematic "stack-torture.sch" "geda")
(test-schematic "stack_1.sch" "geda")
