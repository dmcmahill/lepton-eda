(use-modules (ice-9 receive)
             (srfi srfi-26))

(load-from-path "env.scm")

(define-syntax test-name
  (lambda (x)
    (syntax-case x ()
      ((_ <schematic> <backend>)
       #'(string-append <schematic> "-" <backend>)))))

(define default-test-directory
  (build-filename *abs-top-srcdir* "tools" "netlist" "tests"))

(define backend-directory
  (build-filename *abs-top-srcdir* "tools" "netlist" "scheme" "backend"))

(define default-symbol-directory
  (build-filename default-test-directory "symcache"))

(define* (test-netlist schematic
                       backend
                       #:key
                       (schematics #f)
                       (testdir #f)
                       (golden #f)
                       (complib #f))
  (let* ((test-directory (or testdir default-test-directory))
         (cwd (getcwd))
         (schematic-filenames (map (cut build-filename test-directory <>)
                                   (or schematics
                                       (list schematic))))
         (base (string-drop-right schematic 4))
         (golden (or golden (string-append base "-" backend ".out")))
         (golden-out (build-filename test-directory golden))
         (test-out (tmpnam)))

    (for-each
     (lambda (sch)
       (test-assert (file-exists? sch)))
     schematic-filenames)

    (test-assert (file-exists? golden-out))

    (when testdir (chdir testdir))

    (test-eq EXIT_SUCCESS
      (status:exit-val
       (apply system*
              lepton-netlist
              "-L" backend-directory
              "-c" (string-append "(component-library \""
                                  (or complib default-symbol-directory)
                                  "\")")
              "-g" backend
              "-o" test-out
              schematic-filenames)))

    (when testdir (chdir cwd))

    (test-eq EXIT_SUCCESS
      (status:exit-val (system* "diff" test-out golden-out)))

    (when (file-exists? test-out) (delete-file test-out))))


(define-syntax test-schematic
  (lambda (stx)
    (syntax-case stx ()
      ((_ <schematic> <backend> <args> ...)
       #'(begin
           (test-begin (test-name <schematic> <backend>))
           (test-netlist <schematic> <backend> <args> ...)
           (test-end (test-name <schematic> <backend>)))))))

(test-begin "netlister")

(test-assert (file-exists? lepton-netlist))
(test-eq EXIT_SUCCESS
  (status:exit-val (system* lepton-netlist "--help")))

(test-end "netlister")


(test-schematic "stack-torture.sch" "geda")
(test-schematic "stack_1.sch" "geda")

(define switcap-example-dir
  (build-filename *abs-top-srcdir*
                  "tools"
                  "netlist"
                  "examples"
                  "switcap"))

(define switcap-example-symbol-dir
  (build-filename switcap-example-dir "cache"))

(test-schematic "switcap.sch"
                "switcap"
                #:schematics '("ckt.sch" "clocks.sch" "analysis.sch")
                #:testdir switcap-example-dir
                #:golden "example.scn"
                #:complib switcap-example-symbol-dir)

(test-schematic "utf8.sch" "geda")



(define cwd (getcwd))
(define *testdir* (build-filename (getcwd) "netlist-tmp"))

;;; Setup/teardown directories/files needed by tests.
(define (test-setup)
  (mkdir *testdir*)
  (chdir *testdir*))

(define (test-teardown)
  (chdir cwd)
  (system* "rm" "-rf" *testdir*))


;;; The same function as exists in (lepton os).
(define (user-home-dir)
  (or (getenv "HOME")
      (passwd:dir (getpwuid (getuid)))))


;;; Get the user data directory relative path in $HOME.
(define *user-data-dir*
  (string-drop
   ;; Use lepton-netlist's stdout to get the value of
   ;; (user-data-dir).
   (receive (<status> <stdout> <stderr>)
       (command-values* lepton-netlist -c "(use-modules (lepton os))(display (user-data-dir))")
     <stdout>)
   (1+ (string-length (user-home-dir)))))


(test-begin "lepton-netlist -L")

(test-group-with-cleanup "lepton-netlist -L"
  (test-setup)
  ;; Make a dummy schematic.
  (touch "schematic.sch")
  ;; Make a directory for a new backend.
  (mkdir "backend")

  ;; Make a backend file.
  (sexp->file
   ;; The main backend function displays "-l option" if the option
   ;; was really used in command line used, otherways it displays
   ;; "test backend".
   '(define (test output-filename)
      (if (defined? 'l-option)
          (display "-l option")
          (display "test backend")))
   "backend/gnet-test.scm")
  ;; Make a script for pre-loading.
  (sexp->file '(define l-option 'l-option) "l.scm")

  ;; Make a script for post-loading.
  (sexp->file
   ;; Redefine the test() function defined in the test backend.
   '(define (test output-filename)
      (if (defined? 'l-option)
          (display "-l and -m")
          (display "only -m")))
   "m.scm")

  ;; Set $HOME to the test directory.
  (with-home
   *testdir*

   ;; Test -L option.
   (receive (<status> <stdout> <stderr>)
       (command-values* lepton-netlist -L backend -g test -o - schematic.sch)
     (test-eq EXIT_SUCCESS <status>)
     (test-assert (string-contains <stdout> "test backend"))
     (test-assert (not (string-contains <stdout> "-l option"))))

   ;; Test -L option with relative path.
   (receive (<status> <stdout> <stderr>)
       (command-values* lepton-netlist -L ./backend -g test -o - schematic.sch)
     (test-eq EXIT_SUCCESS <status>)
     (test-assert (string-contains <stdout> "test backend"))
     (test-assert (not (string-contains <stdout> "-l option"))))

   ;; Test -L option with absolute path.
   (receive (<status> <stdout> <stderr>)
       (command-values* lepton-netlist -L $HOME/backend -g test -o - schematic.sch)
     (test-eq EXIT_SUCCESS <status>)
     (test-assert (string-contains <stdout> "test backend"))
     (test-assert (not (string-contains <stdout> "-l option"))))

   ;; Test -l option.
   (receive (<status> <stdout> <stderr>)
       (command-values* lepton-netlist -l l.scm -L backend -g test -o - schematic.sch)
     (test-eq EXIT_SUCCESS <status>)
     (test-assert (not (string-contains <stdout> "test backend")))
     (test-assert (string-contains <stdout> "-l option")))

   ;; Test -l option with relative path.
   (receive (<status> <stdout> <stderr>)
       (command-values* lepton-netlist -l ./l.scm -L backend -g test -o - schematic.sch)
     (test-eq EXIT_SUCCESS <status>)
     (test-assert (not (string-contains <stdout> "test backend")))
     (test-assert (string-contains <stdout> "-l option")))

   ;; Test -l option with absolute path.
   (receive (<status> <stdout> <stderr>)
       (command-values* lepton-netlist -l $HOME/l.scm -L backend -g test -o - schematic.sch)
     (test-eq EXIT_SUCCESS <status>)
     (test-assert (not (string-contains <stdout> "test backend")))
     (test-assert (string-contains <stdout> "-l option")))

   ;; Test -m option.
   (receive (<status> <stdout> <stderr>)
       (command-values* lepton-netlist -m m.scm -L backend -g test -o - schematic.sch)
     (test-eq EXIT_SUCCESS <status>)
     (test-assert (not (string-contains <stdout> "test backend")))
     (test-assert (string-contains <stdout> "only -m")))

   ;; Test -m option with relative path.
   (receive (<status> <stdout> <stderr>)
       (command-values* lepton-netlist -m ./m.scm -L backend -g test -o - schematic.sch)
     (test-eq EXIT_SUCCESS <status>)
     (test-assert (not (string-contains <stdout> "test backend")))
     (test-assert (string-contains <stdout> "only -m")))

   ;; Test -m option with absolute path.
   (receive (<status> <stdout> <stderr>)
       (command-values* lepton-netlist -m $HOME/m.scm -L backend -g test -o - schematic.sch)
     (test-eq EXIT_SUCCESS <status>)
     (test-assert (not (string-contains <stdout> "test backend")))
     (test-assert (string-contains <stdout> "only -m")))

   ;; Test -l and -m options together.
   (receive (<status> <stdout> <stderr>)
       (command-values* lepton-netlist -l l.scm -m m.scm -L backend -g test -o - schematic.sch)
     (test-eq EXIT_SUCCESS <status>)
     (test-assert (not (string-contains <stdout> "test backend")))
     (test-assert (string-contains <stdout> "-l and -m")))

   ;; Test loading files from the user Scheme data directory.
   ;; Create a directory for user data in current $HOME.
   (let* ((scheme-dir (build-filename ($HOME) *user-data-dir* "scheme"))
          (new-l.scm (build-filename scheme-dir "l.scm"))
          (m-dir (build-filename scheme-dir "m"))
          (new-m.scm (build-filename m-dir "m.scm"))
          (inhibit-rc? (getenv "LEPTON_INHIBIT_RC_FILES")))
     ;; Create user Scheme directory and a directory "m" within it.
     (system* "mkdir" "-p" m-dir)
     (rename-file "l.scm" new-l.scm)
     (rename-file "m.scm" new-m.scm)
     ;; Move backend file to the user Scheme directory.  Thus, the
     ;; command below may omit '-L backend'.
     (rename-file "backend/gnet-test.scm" (build-filename scheme-dir "gnet-test.scm"))

     (unsetenv "LEPTON_INHIBIT_RC_FILES")

     ;; Assure the Scheme files are removed from the current
     ;; directory.
     (test-assert (not (file-exists? "l.scm")))
     (test-assert (not (file-exists? "m.scm")))

     ;; The command should still work with relative file names and
     ;; without '-L backend'.
     (receive (<status> <stdout> <stderr>)
         (command-values* lepton-netlist -l l.scm -m m/m.scm -g test -o - schematic.sch)
       (test-eq EXIT_SUCCESS <status>)
       (test-assert (not (string-contains <stdout> "test backend")))
       (test-assert (string-contains <stdout> "-l and -m")))

     (when inhibit-rc?
       (putenv (string-append "LEPTON_INHIBIT_RC_FILES=" inhibit-rc?)))))


  (test-teardown))

(test-end)
