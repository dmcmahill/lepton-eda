(use-modules (ice-9 receive))


(load-from-path "env.scm")

;;; Adjust LANG to avoid issues with localised output. putenv is
;;; necessary for FreeBSD if the environment variable was not yet
;;; defined.
(putenv "LANG=C")

(define lepton-cli
  (build-filename *abs-top-builddir*
                  "utils"
                  "cli"
                  "src"
                  "lepton-cli"))


(define cwd (getcwd))
(define *testdir* (build-filename (getcwd) "config-tmp"))

;;; Setup/teardown directories/files needed by tests.
(define (test-setup)
  (mkdir *testdir*)
  (chdir *testdir*))

(define (test-teardown)
  (chdir cwd)
  (system* "rm" "-rf" *testdir*))


;;; 'lepton-cli config' without arguments returns the name of the
;;; project config file in the current working directory.  The
;;; function canonicalize-path() is used to make sure the path is
;;; correct even if it contains symlinks.
(test-begin "lepton-cli config")

(test-group-with-cleanup "lepton-cli config"
  (test-setup)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config")
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "lepton.conf"))
    (test-assert (string-contains
                  (canonicalize-path (dirname (string-trim-right <stdout>
                                                                 #\newline)))
                  (canonicalize-path (getcwd)))))
  (test-teardown))

(test-end "lepton-cli config")


(test-begin "config -h")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "-h")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "Usage: lepton-cli config")))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "-h" "redundant")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "Usage: lepton-cli config")))

(test-end "config -h")


(test-begin "config --help")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "--help")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "Usage: lepton-cli config")))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "--help" "redundant")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "Usage: lepton-cli config")))

(test-end "config --help")


(test-begin "config --project")

;;; '--project' without arguments.
(test-group-with-cleanup "config --project"
  (test-setup)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project")
    (test-eq EXIT_SUCCESS <status>)
    (let ((output (string-trim-right <stdout> #\newline)))
      (test-equal (basename output) "lepton.conf")
      (test-equal (canonicalize-path (dirname output))
        (canonicalize-path (getcwd)))))

  ;; Clean up.
  (test-teardown))

;;; '--project' with non-existing directory.
(test-group-with-cleanup "config --project=non-existing-dir"
  (test-setup)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=non-existing-dir")
    (test-eq EXIT_SUCCESS <status>)
    (let ((output (string-trim-right <stdout> #\newline)))
      (test-equal (basename output) "lepton.conf")
      (test-equal (canonicalize-path (dirname output))
        (canonicalize-path (getcwd)))))

  ;; Clean up.
  (test-teardown))

;;; '--project' with existing directory.
(test-group-with-cleanup "config --project=existing-dir"
  (test-setup)
  (mkdir "existing-dir")

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=existing-dir")
    (test-eq EXIT_SUCCESS <status>)

    (let ((output (string-trim-right <stdout> #\newline)))
      (test-equal (basename output) "lepton.conf")
      (test-equal (canonicalize-path (dirname output))
        (canonicalize-path "existing-dir"))))

  ;; Clean up.
  (test-teardown))

;;; Check a key without value in a new directory.
(test-group-with-cleanup "config --project=path group [key]"
  (test-setup)
  (mkdir "path")

  ;; Make sure lepton.conf is missing.
  (test-assert (not (file-exists? "path/lepton.conf")))
  ;; First, do not provide a key.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path/" "group")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: You must specify both configuration group and key."))
    (test-assert (string-contains <stderr> "Run `lepton-cli config --help' for more information.")))

  ;; Make sure lepton.conf is still missing.
  (test-assert (not (file-exists? "path/lepton.conf")))
  ;; Now, check that specified group does not exist in config.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path/" "group" "key")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have group 'group'.")))

  ;; Let's create the config file.
  (test-run-success lepton-cli "config" "--project=path/" "somegroup" "somekey" "somevalue")
  ;; Make sure lepton.conf exists now.
  (test-assert (file-exists? "path/lepton.conf"))
  ;; The necessary group "group" is still missing.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path/" "group" "key")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have group 'group'.")))

  ;; Let's create the necessary group with some other key.
  ;; First check, that the key "somekey" is missing.
  (test-run-failure lepton-cli "config" "--project=path/" "group" "somekey")
  ;; Now, create the key "somekey".
  (test-run-success lepton-cli "config" "--project=path/" "group" "somekey" "somevalue")
  ;; The program still errors as we're looking for "key".
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path/" "group" "key")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have key 'key'.")))

  ;; Let's eventually set it.
  (test-run-success lepton-cli "config" "--project=path/" "group" "key" "value")
  ;; All should go smoothly.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "value\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path/" "somegroup" "somekey")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "somevalue\n"))

  ;; Let's change the value now.  I also use "./path" here to just
  ;; make sure such a form works OK.
  (test-run-success lepton-cli "config" "--project=./path/" "group" "key" "other-value")
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "other-value\n"))

  ;; Now make sure there is no config file in CWD, just in case :-)
  (test-assert (not (file-exists? "lepton.conf")))

  ;; lepton-cli simply ignores redundant args.
  (test-run-success lepton-cli "config" "--project=path/" "group" "key" "value" "redundant")
  ;; Clean up.
  (test-teardown))

(test-end "config --project")


(test-begin "config --project=path1/path2/path3")

;;; Test that subdirectories inherit config file settings from
;;; their parent directories.
(test-group-with-cleanup "config --project=path1/path2/path3"
  (test-setup)
  (system*  "mkdir" "-p" "path1/path2/path3")

  (test-run-success lepton-cli "config" "--project=path1/" "group" "key" "value")
  (test-assert (not (file-exists? "lepton.conf")))
  (test-assert (file-exists? "path1/lepton.conf"))
  (test-assert (not (file-exists? "path1/path2/lepton.conf")))
  (test-assert (not (file-exists? "path1/path2/path3/lepton.conf")))

  ;; We should get the same key value set in all three directories.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path1/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "value\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path1/path2/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "value\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path1/path2/path3/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "value\n"))

  ;; Now, set up different keys in different directories.
  (test-assert (not (file-exists? "lepton.conf")))
  (test-run-success lepton-cli "config" "--project=path1/" "group" "key" "val1")
  (test-assert (file-exists? "path1/lepton.conf"))
  (test-run-success lepton-cli "config" "--project=path1/path2/" "group" "key" "val2")
  (test-expect-fail 1)
  (test-assert (file-exists? "path1/path2/lepton.conf"))
  (test-run-success lepton-cli "config" "--project=path1/path2/path3/" "group" "key" "val3")
  (test-expect-fail 1)
  (test-assert (file-exists? "path1/path2/path3/lepton.conf"))
  ;; This doesn't work this way.  If some parent path contains
  ;; config file, a new config file for subdirectory is not
  ;; created.  So let's remove lepton.conf in path1/, and then
  ;; create configs starting from path3/, that is, vice versa.
  (delete-file "path1/lepton.conf")
  (test-run-success lepton-cli "config" "--project=path1/path2/path3/" "group" "key" "val3")
  (test-assert (file-exists? "path1/path2/path3/lepton.conf"))
  (test-run-success lepton-cli "config" "--project=path1/path2/" "group" "key" "val2")
  (test-assert (file-exists? "path1/path2/lepton.conf"))
  (test-run-success lepton-cli "config" "--project=path1/" "group" "key" "val1")
  (test-assert (file-exists? "path1/lepton.conf"))

  ;; These commands are now working as expected.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path1/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "val1\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path1/path2/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "val2\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path1/path2/path3/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "val3\n"))

  ;; Clean up.
  (test-teardown))

(test-end "config --project=path1/path2/path3")
