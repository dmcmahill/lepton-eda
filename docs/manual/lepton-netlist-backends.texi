@node Backends
@section Backends
@cindex backends
@cindex lepton-netlist backends

Under the hood, @netlist{} consists of two parts and thus processes
schematic files in two steps.  The first part called @dfn{frontend}
transforms all given schematics into an intermediate schematic model.
The second part called @dfn{backend} is a Scheme script that takes
that model and transforms its contents into a human readable output
using functions provided by @netlist{} Scheme API.  As you may now
guess, there are several backends in Lepton and each of them uses its
own way to transform the schematic model.  In the command-line, the
user may specify only one backend at a time.


@node Backend launching
@subsection Backend launching
@cindex backend launching
@cindex launch a backend

To simply run @netlist{} and get the output of a backend, use the
option @option{-g @var{backend-name}}.  For example:

@example
lepton-netlist -g custom-backend schematic1.sch ...
@end example

By default, @netlist{} outputs the result to a file named
@file{output.net}.

Output file name may be changed by the option @option{-o
@var{filename}}.  If the option argument is @file{-} (dash), the
output is redirected to the standard output of your terminal.

To output your netlist to, say, @file{schematic.net}, type:

@example
lepton-netlist -g custom-backend -o schematic.net schematic1.sch ...
@end example

To display the output of the backend in your terminal, type:

@example
lepton-netlist -g custom-backend -o - schematic1.sch ...
@end example


@node Backend kinds
@subsection Backend kinds
@cindex backend kinds
@cindex lepton-netlist backend kinds

@netlist{} backends are different by their destination.  Currently,
there are following kinds of backends in Lepton:

@itemize
@item
Backends for creating @acronym{BOM, Bill Of Materials} or list of parts.
@item
Backends for @acronym{DRC, Design Rule Checking}.
@item
Backends for simulation.
@item
Backends for PCB creation.
@item
Backends for automation.
@item
Backends for testing contents of a schematic.
@end itemize


@node Backend types
@subsection Backend types
@cindex backend types
@cindex lepton-netlist backend types

Currently, there are two types of backends for @netlist{}:

@itemize
@item
@dfn{Legacy backend} is a simple Scheme @emph{script} containing a
@emph{definition} of its main function.
@item
@dfn{Module backend} is a Scheme @emph{module} that apart from
definition should @emph{export} its main function.
@end itemize

Initially, legacy backend system had been inherited from gEDA
@command{gnetlist}, and since its invention, file names of legacy
backends had to have, and must now have, the prefix @file{gnet-}.  As
both types of backends are Scheme files, they should have the
extension @file{.scm}.  A backend of any type should define a main
function named the same as the backend itself.  Please note that the
name of a backend is not the same as of its file name.  Subtle
differences in naming will be revealed in the next sections.

In both cases @netlist{} loads and evaluates the main backend function
at a certain stage of its execution.


@node Legacy backends
@subsubsection Legacy backends
@cindex legacy backends
@cindex lepton-netlist legacy backends

Legacy backend system has been inherited from gEDA @command{gnetlist}.

In order @netlist{} to understand a file is a legacy backend, it must
meet the following requirements:
@itemize
@item
Its filename must have the @file{gnet-} prefix.
@item
The filename must have the extension @file{.scm}.
@item
It should export a function named the same as backend itself.
@end itemize

The name of the backend is defined by removing the prefix @file{gnet-}
and the suffix @file{.scm} from its file basename.  For example, if
backend file name is @file{gnet-custom-backend.scm}, its name is
@code{custom-backend} and its code has to contain a definition of a
function named @code{custom-backend}.  The function must take one
argument which is the output file name.  Really, it is not necessary
to use this argument in the code as @netlist{} automatically redirects
the standard output of the function into a file if it is specified by
its command-line arguments.


@node Module backends
@subsubsection Module backends
@cindex module backends
@cindex lepton-netlist module backends

Unlike legacy backends, a module backend is simply a Scheme module.
In order @netlist{} to understand a file is a module backend, it must
meet the following requirements:

@itemize
@item
The filename must have the extension @file{.scm}.
@item
It must define the module in the @samp{backend} namespace and export
the same named function.
@item
It must live in one of Lepton's user or system data directories.
@end itemize

For example, the name of your backend is @file{my-backend.scm}.  In
the code, you have to add module definition as follows:

@lisp
(define-module (backend my-backend)
  #:export (my-backend))
@end lisp

The exported function has take no arguments.  What it outputs to the
standard output port is redirected by @netlist{} to the specified
output file or standard output, or to the default output name if no
output file name is specified.

The function may be defined as follows:
@lisp
(define (my-backend)
  (some-code-follows) ...)
@end lisp

To make the function take an arbitrary list of arguments, it can be
defined as follows:
@lisp
(define (my-backend . args)
  (some-code-that-use-args args) ...)
@end lisp

So, if you want the backend to be available system-wide, put it in the
@file{scheme/backend} subdirectory of one of the directories reported
by the function @code{sys-data-dirs}, e.g. @file{/etc/lepton-eda}.  To
find out the paths, you can use @command{lepton-shell}.  For example:

@example
$ lepton-shell -c '(use-modules (lepton os)) (display (sys-data-dirs))'
(/usr/local/share/lepton-eda /usr/share/lepton-eda)
$ sudo cp my-backend.scm /usr/local/share/lepton-eda/scheme/backend
@end example

If you want the backend to be available only for you, e.g. when you're
just developing it, put it into the @file{scheme/backend/}
subdirectory of your Lepton user data directory which can be found
using the function @code{user-data-dir}, typically
@file{~/.local/share/lepton-eda}.  For example:

@example
$ lepton-shell -c '(use-modules (lepton os)) (display (user-data-dir))'
/home/vzh/.local/share/lepton-eda
$ cp my-backend.scm /home/vzh/.local/share/lepton-eda/scheme/backend
@end example
