(use-modules (srfi srfi-64)
             (ice-9 receive))

(load-from-path "env.scm")

;;; sch2pcb should be aware of where the netlister sits.
(setenv "NETLISTER" *netlister*)


(define cwd (getcwd))
(define *testdir* (build-filename (getcwd) "sch2pcb-tmp"))

(define repo-module-path (build-filename "liblepton" "scheme"))
(define repo-backend-path (build-filename "tools" "netlist" "scheme" "backend"))
;;; Where built modules live.
(define built-module-path (build-filename *abs-top-builddir* repo-module-path))
;;; Where other modules live.
(define source-module-path (build-filename *abs-top-srcdir* repo-module-path))
;;; Where built backends (gsch2pcb) live.
(define built-backend-path (build-filename *abs-top-builddir* repo-backend-path))
;;; Where other backends live.
(define source-backend-path (build-filename *abs-top-srcdir* repo-backend-path))

;;; Now, the netlister needs to know where Scheme modules and
;;; backends are.
(setenv "GUILE_LOAD_PATH"
        (string-join (append (list built-module-path
                                   source-module-path
                                   built-backend-path
                                   source-backend-path)
                             ;; Current GUILE_LOAD_PATH.
                             %load-path)
                     ;; Delimiter.
                     ":"))


;;; Setup/teardown directories/files needed by tests.
(define (test-setup)
  (mkdir *testdir*)
  (chdir *testdir*))

(define (test-teardown)
  (chdir cwd)
  (system* "rm" "-rf" *testdir*))


(test-begin "sch2pcb-exists")

(test-assert (file-exists? lepton-sch2pcb))

(test-end)


(test-begin "sch2pcb")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-sch2pcb)
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "usage: lepton-sch2pcb")))

(test-end)


(test-begin "sch2pcb -h")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-sch2pcb "-h")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "usage: lepton-sch2pcb")))

(test-end)


;;; First part of multi-page schematic.
(define one.sch "one.sch")
(define tests/one.sch
  (build-filename *abs-top-srcdir* "tools" "sch2pcb" "tests" one.sch))
(define *testdir*/one.sch (build-filename *testdir* one.sch))

;;; Second part of multi-page schematic.
(define two.sch "two.sch")
(define tests/two.sch
  (build-filename *abs-top-srcdir* "tools" "sch2pcb" "tests" two.sch))
(define *testdir*/two.sch (build-filename *testdir* two.sch))


(test-begin "sch2pcb-schematics")

(test-group-with-cleanup "sch2pcb-schematics"

  ;; Prepare test directory with necessary schematic files.
  (test-setup)
  (copy-file tests/one.sch *testdir*/one.sch)
  (copy-file tests/two.sch *testdir*/two.sch)

  ;; No project file, no PCB elements, just schematic.
  ;; lepton-sch2pcb exits with status 0.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>))

  (test-teardown))

(test-end)


(test-begin "sch2pcb --help")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-sch2pcb "--help")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "usage: lepton-sch2pcb")))

(test-end)


(test-begin "sch2pcb wrong options")

(test-expect-fail 2)

(receive (<status> <stdout> <stderr>)
    (command-values lepton-sch2pcb "--unexisting-option")
  (test-eq EXIT_FAILURE <status>))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-sch2pcb "-broken-option")
  (test-eq EXIT_FAILURE <status>))

(test-end)
