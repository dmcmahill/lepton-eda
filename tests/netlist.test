(use-modules (srfi srfi-64)
             (srfi srfi-26))

(load-from-path "env.scm")

(define-syntax test-name
  (lambda (x)
    (syntax-case x ()
      ((_ <schematic> <backend>)
       #'(string-append <schematic> "-" <backend>)))))

(define default-test-directory
  (build-filename *abs-top-srcdir* "utils" "netlist" "tests"))


(define* (test-netlist schematic
                       backend
                       #:key
                       (schematics #f)
                       (testdir #f)
                       (golden #f))
  (let* ((testdir (or testdir default-test-directory))
         (schematic-filenames (map (cut build-filename testdir <>)
                                   (or schematics
                                       (list schematic))))
         (base (string-drop-right schematic 4))
         (golden (or golden (string-append base "-" backend ".out")))
         (golden-out (build-filename testdir golden))
         (test-out (tmpnam)))

    (for-each
     (lambda (sch)
       (test-assert (file-exists? sch)))
     schematic-filenames)

    (test-assert (file-exists? golden-out))

    (test-eq EXIT_SUCCESS
      (status:exit-val
       (apply system*
              *netlister*
              "-L" *backend-directory*
              "-c" *component-library-command*
              "-g" backend
              "-o" test-out
              schematic-filenames)))
    (test-eq EXIT_SUCCESS
      (status:exit-val (system* "diff" test-out golden-out)))

    (when (file-exists? test-out) (delete-file test-out))))


(define-syntax test-schematic
  (lambda (stx)
    (syntax-case stx ()
      ((_ <schematic> <backend> <args> ...)
       #'(begin
           (test-begin (test-name <schematic> <backend>))
           (test-netlist <schematic> <backend> <args> ...)
           (test-end (test-name <schematic> <backend>)))))))

(test-begin "netlister")

(test-assert (file-exists? *netlister*))
(test-eq EXIT_SUCCESS
  (status:exit-val (system* *netlister* "--help")))

(test-end "netlister")


(test-schematic "stack-torture.sch" "geda")
(test-schematic "stack_1.sch" "geda")
(test-schematic "switcap.sch"
                "switcap"
                #:schematics '("ckt.sch" "clocks.sch" "analysis.sch")
                #:testdir (build-filename *abs-top-srcdir*
                                          "utils" "netlist" "examples" "switcap")
                #:golden "example.scn")
